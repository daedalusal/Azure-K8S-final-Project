pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: dind
      image: docker:24.0.2-dind
      securityContext:
        privileged: true
      args:
        - --host=tcp://0.0.0.0:2375
        - --host=unix:///var/run/docker.sock
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
      readinessProbe:
        exec:
          command:
            - sh
            - -c
            - |
              docker info > /dev/null 2>&1
        initialDelaySeconds: 5
        periodSeconds: 2
        failureThreshold: 10
      volumeMounts:
        - name: docker-graph-storage
          mountPath: /var/lib/docker
    - name: build
      image: docker:24.0.2-cli
      command:
        - cat
      tty: true
      env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        - name: DOCKER_IMAGE
          value: "daedalusal/your-image-name"
        - name: DOCKER_TAG
          value: "latest"
      volumeMounts:
        - name: docker-graph-storage
          mountPath: /var/lib/docker
    - name: python
      image: python:3.9-slim
      command:
        - cat
      tty: true
  volumes:
    - name: docker-graph-storage
      emptyDir: {}
            """
            defaultContainer 'build'
        }
    }
    stages {
    stage('Build') {
      steps {
        container('build') {
          script {
            // Wait for Docker daemon to be ready, up to 90 seconds
            def maxTries = 45
            def ready = false
            for (int i = 0; i < maxTries; i++) {
              if (sh(script: 'docker info > /dev/null 2>&1', returnStatus: true) == 0) {
                ready = true
                break
              }
              echo "Waiting for Docker daemon... (${i+1}/${maxTries})"
              sleep 2
            }
            if (!ready) {
              echo 'Docker daemon did not start in time. Printing DinD logs (if available):'
              sh 'ps aux || true'
              sh 'cat /var/log/docker.log || true'
              error('Docker daemon did not start in time. See DinD logs above.')
            }
            sh "docker version"
            dir('applications') {
              sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f Dockerfile.python ."
              sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
            }
          }
        }
      }
    }
    stage('Push') {
      steps {
        container('build') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
            sh "docker push ${DOCKER_IMAGE}:latest"
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        container('build') {
          withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG')]) {
            sh '''
              helm upgrade --install python-api ./helm/python-api \
                --namespace python-api --create-namespace \
                --set image.repository=${DOCKER_IMAGE} \
                --set image.tag=${DOCKER_TAG} \
                --set ingress.hosts[0].host=api.daedalusproject.online \
                --set ingress.tls[0].hosts[0]=api.daedalusproject.online
            '''
          }
        }
      }
    }
    stage('Test') {
      steps {
        container('python') {
          dir('applications') {
            sh "python3 -m py_compile main.py"
          }
        }
      }
    }
    }
    post {
        always {
            echo "Pipeline execution completed"
        }
        success {
            echo "üéâ Pipeline succeeded! Docker image built and pushed!"
        }
        failure {
            echo "‚ùå Pipeline failed! Check logs for details."
        }
    }
}
