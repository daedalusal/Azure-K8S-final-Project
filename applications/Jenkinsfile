pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "python-rest-api"
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = "python-api"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/daedalusal/Azure-K8S-final-Project.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh """
                        docker --version || echo "Docker not available on this agent"
                        echo "Building ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    """
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    echo "Running tests for ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    // Add your test commands here
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Update the Kubernetes deployment with new image
                    sh """
                        echo "Deploying ${DOCKER_IMAGE}:${DOCKER_TAG} to namespace ${KUBE_NAMESPACE}"
                        kubectl version --client || echo "kubectl not available"
                        # kubectl set image deployment/python-rest-api python-rest-api=${DOCKER_IMAGE}:${DOCKER_TAG} -n ${KUBE_NAMESPACE}
                        # kubectl rollout status deployment/python-rest-api -n ${KUBE_NAMESPACE} --timeout=300s
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    // Verify the deployment is successful
                    sh """
                        echo "Verifying deployment in namespace ${KUBE_NAMESPACE}"
                        # kubectl get pods -n ${KUBE_NAMESPACE}
                        # kubectl get svc -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up
            echo "Pipeline completed"
        }
        success {
            // Notify success
            echo "Deployment successful!"
        }
        failure {
            // Notify failure
            echo "Pipeline failed!"
        }
    }
}