# Kubernetes Cluster Problems and Solutions

## Date: September 29, 2025

### Problem 1: Jenkins Init Container Failures - DNS Resolution Issues
**Description:** Jenkins pod stuck in `Init:0/2` status with config-reload-init container failing to connect to Kubernetes API at 10.96.0.1:443

**Error Messages:**
```
Connection to 10.96.0.1 timed out. (connect timeout=None)
failed calling webhook "webhook.cert-manager.io": failed to call webhook: Post "https://cert-manager-webhook.cert-manager.svc:443/validate?timeout=30s": context deadline exceeded
```

**Root Cause:** NetworkPolicy blocking egress traffic to Kubernetes API service
- The `allow-dns-jenkins` NetworkPolicy was too restrictive
- Only allowed ports 53, 80, 443 but blocked service network access
- Jenkins init containers needed access to Kubernetes API for configuration

**Solution Applied:**
1. Updated NetworkPolicy to include Kubernetes service network (10.96.0.0/12)
2. Added explicit port 6443 access for Kubernetes API
3. Eventually removed all NetworkPolicies for learning environment

**Code Fix:**
```yaml
# Original problematic NetworkPolicy
egress:
- to: []
  ports:
  - protocol: TCP
    port: 443

# Fixed NetworkPolicy (before complete removal)
egress:
- to: []
  ports:
  - protocol: TCP
    port: 443
- to:
  - ipBlock:
      cidr: 10.96.0.0/12
  ports:
  - protocol: TCP
    port: 443
```

### Problem 2: cert-manager ACME Registration Failures
**Description:** ClusterIssuer showing `READY: False` with DNS resolution timeouts

**Error Messages:**
```
Failed to register ACME account: Get "https://acme-v02.api.letsencrypt.org/directory": dial tcp: lookup acme-v02.api.letsencrypt.org: i/o timeout
```

**Root Cause:** 
- cert-manager pods couldn't resolve external DNS due to NetworkPolicy restrictions
- Azure DNS configuration not applied to cert-manager deployment
- Webhook validation timing out during ClusterIssuer creation

**Solution Applied:**
1. Removed all NetworkPolicies to allow unrestricted egress
2. Added Azure DNS configuration to cert-manager deployment
3. Used `--validate=false` flag to bypass webhook validation timeout
4. Added proper wait conditions for cert-manager startup

**Code Fix:**
```bash
# DNS Configuration Patch
kubectl patch deployment cert-manager -n cert-manager -p '{
  "spec": {
    "template": {
      "spec": {
        "dnsPolicy": "ClusterFirst",
        "dnsConfig": {
          "nameservers": ["168.63.129.16", "8.8.8.8"],
          "searches": ["cert-manager.svc.cluster.local", "svc.cluster.local", "cluster.local"],
          "options": [
            {"name": "ndots", "value": "2"},
            {"name": "edns0"}
          ]
        }
      }
    }
  }
}'
```

### Problem 3: cert-manager Webhook Timeout Issues
**Description:** ClusterIssuer creation failing with webhook validation timeouts

**Error Messages:**
```
error when creating "STDIN": Internal error occurred: failed calling webhook "webhook.cert-manager.io": failed to call webhook: Post "https://cert-manager-webhook.cert-manager.svc:443/validate?timeout=30s": dial tcp 10.101.9.205:443: i/o timeout
```

**Root Cause:**
- cert-manager webhook pod not ready during ClusterIssuer creation
- Network connectivity issues between webhook service and pods
- startupapicheck job failing due to webhook unavailability

**Solution Applied:**
1. Added wait conditions for webhook readiness
2. Deleted failed startupapicheck job and let it recreate
3. Used `--validate=false` flag to bypass webhook validation temporarily
4. Removed NetworkPolicies blocking internal communication

**Code Fix:**
```yaml
# Added wait condition in playbook
- name: Wait for cert-manager webhook to be ready
  shell: |
    kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s

# Bypass validation temporarily
kubectl apply --validate=false -f - <<EOF
```

### Problem 4: Ansible Playbook Stuck at NGINX Ingress Installation
**Description:** Playbook hanging at NGINX ingress installation step without proceeding to cert-manager

**Root Cause:**
- Helm install command without timeout specifications
- No wait conditions for deployment completion
- Playbook couldn't determine when installation completed

**Solution Applied:**
1. Added `--wait --timeout=10m` flags to Helm installations
2. Manually completed cert-manager installation when playbook stuck
3. Added proper rollout status checks

**Code Fix:**
```yaml
# Original
helm install cert-manager jetstack/cert-manager

# Fixed
helm install cert-manager jetstack/cert-manager \
  --wait --timeout=10m
```

### Problem 5: NetworkPolicy Complexity in Learning Environment
**Description:** Multiple networking issues caused by restrictive NetworkPolicies

**Root Cause:**
- NetworkPolicies designed for production security
- Too complex for learning/development environment
- Blocking legitimate pod-to-pod communication
- DNS resolution issues across namespaces

**Solution Applied:**
1. Removed all NetworkPolicies from all namespaces
2. Documented the decision in README
3. Added note about production vs learning environment considerations

**Code Fix:**
```yaml
# Removed all NetworkPolicy sections and replaced with:
- name: Remove all NetworkPolicies for learning environment
  shell: |
    kubectl delete networkpolicy --all --all-namespaces || true
```

### Problem 6: Missing CI/CD Pipeline Configuration
**Description:** No automated CI/CD pipeline setup for application deployment

**Root Cause:** Original project missing Jenkins pipeline configuration

**Solution Applied:**
1. Created complete Jenkinsfile with Kubernetes agents
2. Added RBAC permissions for Jenkins to manage deployments
3. Created example Python REST API application
4. Added Docker build and deployment automation

**Code Fix:**
```yaml
# Added Jenkins RBAC configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-deploy
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
```

## ðŸŽ¯ Key Lessons Learned

### 1. NetworkPolicy Considerations
- **Learning Environment**: Permissive networking preferred for simplicity
- **Production Environment**: Implement NetworkPolicies with careful testing
- **Azure Specifics**: NetworkPolicies can be complex with service IPs vs pod IPs

### 2. DNS Configuration Critical
- **Azure DNS (168.63.129.16)** must be primary for Azure VMs
- **External connectivity** essential for cert-manager and package downloads
- **CoreDNS configuration** needs Azure-specific settings

### 3. cert-manager Deployment Patterns
- **Webhook readiness** takes time - add proper wait conditions
- **DNS connectivity** required for ACME challenge
- **Validation bypass** useful during troubleshooting

### 4. Jenkins on Kubernetes Best Practices
- **RBAC permissions** essential for deployment automation
- **Kubernetes agents** better than static agents
- **DNS configuration** critical for plugin downloads

### 5. Ansible Automation Improvements
- **Wait conditions** prevent hanging deployments
- **Timeout specifications** for all Helm operations
- **Error handling** with `ignore_errors: yes` where appropriate

## ðŸ”§ Quick Troubleshooting Guide

### DNS Issues
```bash
# Test DNS resolution from any namespace
kubectl run dns-test --image=busybox:1.28 --rm -it --restart=Never -n <namespace> -- nslookup google.com

# Check CoreDNS logs
kubectl logs -n kube-system deployment/coredns
```

### cert-manager Issues
```bash
# Check ClusterIssuer status
kubectl describe clusterissuer letsencrypt-prod

# Check cert-manager logs
kubectl logs -n cert-manager deployment/cert-manager

# Force restart cert-manager
kubectl rollout restart deployment/cert-manager -n cert-manager
```

### Jenkins Issues
```bash
# Check Jenkins pod status
kubectl get pods -n jenkins

# Get Jenkins admin password
kubectl get secret jenkins -n jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode

# Check Jenkins logs
kubectl logs -n jenkins statefulset/jenkins
```

### NetworkPolicy Issues
```bash
# List all NetworkPolicies
kubectl get networkpolicy --all-namespaces

# Remove all NetworkPolicies (learning environment)
kubectl delete networkpolicy --all --all-namespaces
```

## ðŸ“… Timeline of Issues Resolution

1. **17:00** - Jenkins pod stuck in Init:0/2 status
2. **17:15** - Identified Kubernetes API connectivity timeout
3. **17:30** - Fixed NetworkPolicy for Jenkins namespace
4. **17:45** - Jenkins pod running successfully
5. **18:00** - cert-manager installation started
6. **18:15** - cert-manager webhook timeout issues
7. **18:30** - Applied DNS configuration to cert-manager
8. **18:45** - Removed all NetworkPolicies
9. **19:00** - ClusterIssuer successfully registered with Let's Encrypt
10. **19:15** - Added complete CI/CD pipeline configuration
11. **19:30** - Updated documentation with all fixes

**Total Resolution Time:** ~2.5 hours
**Final Status:** âœ… All components working successfully